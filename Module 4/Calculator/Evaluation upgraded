public class Evaluation implements Visitor {

    public int[] visitAll(Node visitable){
        int[] result = new int[2];

        int leftMember = 0;
        int rightMember = 0;

        if (visitable.getLeft() instanceof Leaf){
            leftMember = ((Leaf) visitable.getLeft()).value;
        }

        else if (visitable.getLeft() instanceof Div){
            leftMember = visit((Div) visitable.getLeft());
        }

        else if (visitable.getLeft() instanceof Mult){
            leftMember = visit((Mult) visitable.getLeft());
        }

        else if (visitable.getLeft() instanceof Sub)
            leftMember = visit((Sub) visitable.getLeft());

        else if (visitable.getLeft() instanceof Add){
            leftMember = visit((Add) visitable.getLeft());
        }

        if (visitable.getRight() instanceof Leaf){
            rightMember = ((Leaf) visitable.getRight()).getValue();
        }

        else if (visitable.getRight() instanceof Add){
            rightMember = visit((Add) visitable.getRight());
        }

        else if (visitable.getRight() instanceof Mult){
            rightMember = visit((Mult) visitable.getRight());
        }

        else if (visitable.getRight() instanceof Div){
            rightMember = visit((Div) visitable.getRight());
        }
        else if (visitable.getRight() instanceof Sub){
            rightMember = visit((Sub) visitable.getRight());
        }

        result[0] = leftMember;
        result[1] = rightMember;

        return result;

    }


    @Override
    public int visit(Add visitable) {

        int leftMember = visitAll(visitable)[0];
        int rightMember = visitAll(visitable)[1];

        return leftMember + rightMember;
    }

    @Override
    public int visit(Mult visitable) {

        int leftMember = visitAll(visitable)[0];
        int rightMember = visitAll(visitable)[1];


        return leftMember * rightMember;
    }

    @Override
    public int visit(Div visitable) {

        int leftMember = visitAll(visitable)[0];
        int rightMember = visitAll(visitable)[1];

        if (rightMember == 0){
            throw new IllegalArgumentException("You cannot divide by zero");
        }
        // Or
        // try{
        //     return leftMember / rightMember;
        // }
        // catch(Exception e){
        //     throw new IllegalArgumentException("You cannot divide by zero");
        // }

        return leftMember / rightMember;
    }

    @Override
    public int visit(Sub visitable) {
        int leftMember = visitAll(visitable)[0];
        int rightMember = visitAll(visitable)[1];

        return leftMember - rightMember;
    }

    @Override
    public int visit(Leaf visitable) {
        return visitable.getValue();
    }
    // YOUR CODE HERE




    public static void main(String[] args) {
        Node root = new Add(                                            // ((6-2)/(1+1))+(5*2)
                new Div(                                    // (6-2)/(1+1)
                        new Sub(new Leaf(6), new Leaf(2)),      // 6-2
                        new Add(new Leaf(1), new Leaf(1))),     // 1+1
                new Mult(new Leaf(5), new Leaf(2)));        // 5*2
        Visitor calculator = new Evaluation();

        System.out.println(calculator.visit((Add)root)); // 12

        Visitor calculator_2 = new Evaluation();
        Node root2 = new Div(new Leaf(8), new Leaf(4));
        System.out.println(calculator_2.visit((Div)root2));
    }
}
